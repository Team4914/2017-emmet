// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4914.CurbStomper;

import edu.wpi.cscore.CvSink;
import edu.wpi.cscore.CvSource;
import edu.wpi.cscore.UsbCamera;
import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.networktables.NetworkTable;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.opencv.core.Mat;
import org.usfirst.frc4914.CurbStomper.commands.*;
import org.usfirst.frc4914.CurbStomper.subsystems.*;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {

    Command autonomousCommand;
    SendableChooser autoChooser;
    
    static NetworkTable table;
    
    static CameraServer server;

    public static double leftSpeed;
    public static double rightSpeed;
    
    public static OI oi;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static DriveTrain driveTrain;
    public static PDP pDP;
    public static Intake intake;
    public static Climber climber;
    public static Shooter shooter;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    public void robotInit() {
    	RobotMap.init();
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrain = new DriveTrain();
        pDP = new PDP();
        intake = new Intake();
        climber = new Climber();
        shooter = new Shooter();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        oi = new OI();
        
        // initializes networktable
        table = NetworkTable.getTable("HookContoursReport");
        
        // camera switching code
        server = CameraServer.getInstance();
        Thread t = new Thread(() -> {
    		
    		boolean allowCam1 = false;
    		
    		UsbCamera camera1 = CameraServer.getInstance().startAutomaticCapture(0);
            camera1.setResolution(160, 120);
            camera1.setFPS(30);
            UsbCamera camera2 = CameraServer.getInstance().startAutomaticCapture(1);
            camera2.setResolution(160, 120);
            camera2.setFPS(30);
            
            CvSink cvSink1 = CameraServer.getInstance().getVideo(camera1);
            CvSink cvSink2 = CameraServer.getInstance().getVideo(camera2);
            CvSource outputStream = CameraServer.getInstance().putVideo("Switcher", 160, 120);
            
            Mat image = new Mat();
            
            while(!Thread.interrupted()) {
            	
            	if (Robot.oi.getPrimaryJoystick().getRawButton(4)) { allowCam1 = !allowCam1; }
            	
                if(allowCam1){
                  cvSink2.setEnabled(false);
                  cvSink1.setEnabled(true);
                  cvSink1.grabFrame(image);
                } else{
                  cvSink1.setEnabled(false);
                  cvSink2.setEnabled(true);
                  cvSink2.grabFrame(image);     
                }
                
                outputStream.putFrame(image);
            }
            
        });
        t.start();
        
        // set up sendable chooser for autonomous
        autoChooser = new SendableChooser();
        autoChooser.addDefault("Middle Hook", new AUTOMiddleHook());
        autoChooser.addObject("Left Hook", new AUTOLeftHook());
        autoChooser.addObject("RightHook", new AUTORightHook());
        SmartDashboard.putData("Auto Chooser", autoChooser);
        
        	
        // instantiate the command used for the autonomous period
        
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    public void disabledInit(){
    	Robot.climber.stop();
    	Robot.driveTrain.stop();
    	Robot.intake.stop();
    	Robot.shooter.stop();
    }

    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    public void autonomousInit() {
        // TODO Autonomous Selector
    	autonomousCommand = (Command) autoChooser.getSelected();
    	autonomousCommand.start();
    }

    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
    }

    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
    }

    /**
     * This function is called periodically during operator control
     */
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
        System.out.println("X: " + getGoalX() + " Y: " + getGoalY() + " shoot: " + shooter.shootSpeed);
        
        double coFactor = 5.0;
        
        // drive controls
        if (DriveTrain.isInverted) {
        	// Robot.driveTrain.tankDrive(-Robot.oi.getPrimaryRJ(), -Robot.oi.getPrimaryLJ());
        	// main drive
        	if (DriveTrain.isStraight) {
        		leftSpeed -= Robot.oi.getPrimaryLJ();
        		rightSpeed -= Robot.oi.getPrimaryLJ();
        	} else {
	        	leftSpeed -= Robot.oi.getPrimaryRJ();
	        	rightSpeed -= Robot.oi.getPrimaryLJ();
        	}
        	// co turn
        	if (Math.abs(Robot.oi.getCoZ()) > 0.25) {
        		leftSpeed -= Robot.oi.getCoZ() / coFactor;
        		rightSpeed += Robot.oi.getCoZ() / coFactor;
        	}
        	// co straight
        	leftSpeed -= Robot.oi.getCoY() / coFactor;
        	rightSpeed -= Robot.oi.getCoY() / coFactor;
        } else {
        	// Robot.driveTrain.tankDrive(Robot.oi.getPrimaryLJ(), Robot.oi.getPrimaryRJ());
        	// main drive
        	if (DriveTrain.isStraight) {
        		leftSpeed += Robot.oi.getPrimaryLJ();
        		rightSpeed += Robot.oi.getPrimaryLJ();
        	} else {
	        	leftSpeed += Robot.oi.getPrimaryLJ();
	        	rightSpeed += Robot.oi.getPrimaryRJ();
        	}
        	// co turn
        	if (Math.abs(Robot.oi.getCoZ()) > 0.25) {
	        	leftSpeed -= Robot.oi.getCoZ() / coFactor;
	        	rightSpeed += Robot.oi.getCoZ() / coFactor;
        	}
        	// co straight
        	leftSpeed += Robot.oi.getCoY() / coFactor;
        	rightSpeed += Robot.oi.getCoY() / coFactor;
        }
        
        Robot.driveTrain.tankDrive(leftSpeed, rightSpeed);

        // climber controls
        if (Robot.oi.getPrimaryLT() < 0.1) {
        	Robot.climber.setSpeed(Robot.oi.getPrimaryRT());
        } else {
        	Robot.climber.setSpeed(-Robot.oi.getPrimaryLT());
        }
        
        leftSpeed = 0;
        rightSpeed = 0;
        
    }

    /**
     * This function is called periodically during test mode
     */
    public void testPeriodic() {
        LiveWindow.run();
    }
    /**
     * Returns goal X position on camera
     */
    public static double getGoalX() {
    	return table.getNumber("cX", -1);
    }
    
    /**
     * Returns goal Y position on camera
     */
    public static double getGoalY() {
    	return table.getNumber("cY", -1);
    }
    
    /**
     * Changes camera feed
     */
    public static void switchCamera() {
    }
}
