// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4914.CurbStomper.subsystems;

import org.usfirst.frc4914.CurbStomper.RobotMap;
import org.usfirst.frc4914.CurbStomper.commands.*;

import com.ctre.CANTalon;

import edu.wpi.first.wpilibj.ADXRS450_Gyro;
import edu.wpi.first.wpilibj.RobotDrive;

import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class DriveTrain extends Subsystem {
	
	public static final double AUTO_SPEED = 0.2;
	public static final double ANGLE_EPSILON = 2;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	private final ADXRS450_Gyro gyro = RobotMap.gyro;
	private final CANTalon CIMRearLeft = RobotMap.driveTrainCIMRearLeft;
    private final CANTalon CIMFrontLeft = RobotMap.driveTrainCIMFrontRight;
    private final CANTalon CIMRearRight = RobotMap.driveTrainCIMRearRight;
    private final CANTalon CIMFrontRight = RobotMap.driveTrainCIMFrontRight;
	private final RobotDrive robotDrive41 = RobotMap.driveTrainRobotDrive41;

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    
    /**
     * Operates drivetrain in tank drive
     * squaredInputs = true, effectively lowering sensitivity at lower speeds
     * 
     * @param leftValue value from 1 to -1 representing percentage at which to run motors
     * @param rightValue value from 1 to -1 representing percentage at which to run motors
     */
    public void tankDrive(double leftValue, double rightValue) {
    	// safety for left side values
    	if (leftValue > 1) leftValue = 1;
    	else if (leftValue < -1) leftValue = -1;
    	
    	// safety for right side values
    	if (rightValue > 1) rightValue = 1;
    	else if (rightValue < -1) rightValue = -1;
    	
    	robotDrive41.tankDrive(-leftValue, -rightValue, false);
    } // END OF tankDrive(double leftValue, double rightValue)
    
    /**
     * Stops drivetrain operation
     */
    public void stop() {
    	robotDrive41.stopMotor();
    } // END OF stop()
    
    /**
     * Inverts all motors
     */
    public void invert() {
    	// CIMRearLeft.setInverted(true);
    	// CIMFrontLeft.setInverted(true);
    	// CIMRearRight.setInverted(true);
    	// CIMFrontRight.setInverted(true);
    }
    
    /**
     * Sets brake/coast mode
     */
    public void setBrake(boolean brake) {
    	CIMRearLeft.enableBrakeMode(brake);
    	CIMFrontLeft.enableBrakeMode(brake);
    	CIMRearRight.enableBrakeMode(brake);
    	CIMFrontRight.enableBrakeMode(brake);
    }
    
    /**
     * Returns gyro bearing
     * 
     * @return gyro bearing
     */
    public double getGyroBearing() {
    	return gyro.getAngle();
    }
    
    /**
     * 
     * Resets the gyro bearing
     */
    public void resetGyro() {
    	gyro.reset();
    }
}
